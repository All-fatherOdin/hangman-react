{"version":3,"sources":["components/Header.js","components/LetterContainer.js","components/Slipknot.js","components/Keyboard.js","components/EncryptionWord.js","components/StartButton.js","components/Main.js","components/EndGame.js","utils/api.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","LetterContainer","letter","pressedKeyBoardSymbols","letterClassName","coverClassName","Slipknot","letterStatus","gameStatus","pressedLetter","history","hangmanParts","document","querySelectorAll","useEffect","forEach","item","classList","add","invisibleParts","Array","from","filter","contains","console","log","length","remove","Promise","resolve","reject","setTimeout","then","push","id","Keyboard","getLetter","onClick","EncryptionWord","renderWord","StartButton","startGame","type","Main","newWord","useState","setGameStatus","letters","setLetters","setPressedLetter","pressedLetterStatus","setPressedLetterStatus","encryptedLetters","guessedLetters","checkGuessed","path","i","map","e","target","textContent","setAttribute","buttonOff","includes","EndGame","children","apiMovies","res","ok","json","status","fetch","headers","this","_checkResponse","App","setWord","keyBoardSymbol","setKeyBoardSymbol","useHistory","getMovies","moviesList","words","Math","floor","random","getKeyBoardSymbol","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c6f16212.chunk.js","sourcesContent":["function Header() {\r\n   return(\r\n      <header className=\"header\">\r\n         <h1 className=\"header__title\">Hangman</h1>\r\n      </header>\r\n   )\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nfunction LetterContainer({letter, pressedKeyBoardSymbols}) {\r\n   \r\n   const letterClassName = pressedKeyBoardSymbols[`${letter}`] ? \"encryption-word__letter\" \r\n   : \"encryption-word__letter put-up-block\";\r\n   const coverClassName = pressedKeyBoardSymbols[`${letter}`] ? \"encryption-word__cover\" : \"encryption-word__cover put-up-block\";\r\n\r\n   return(\r\n      <li className=\"encryption-word__letter-container\">\r\n         <h2 className={letterClassName}>\r\n            {letter}\r\n         </h2>\r\n         <div className={coverClassName}></div>\r\n      </li>\r\n   )\r\n} \r\n\r\nexport default LetterContainer;","import { useEffect } from \"react\"\r\n\r\nfunction Slipknot({ letterStatus, gameStatus, pressedLetter, history}) {\r\n\r\n   const hangmanParts = document.querySelectorAll(\"#hangman-part\");\r\n\r\n   useEffect(() => {\r\n      if(gameStatus){\r\n         hangmanParts.forEach((item) => {\r\n            item.classList.add(\"invisible-block\")\r\n         })\r\n      }\r\n   }, [gameStatus])\r\n\r\n   useEffect(() => {\r\n      const invisibleParts = Array.from(hangmanParts).filter((item) => {\r\n         return item.classList.contains('invisible-block')\r\n      })\r\n      console.log(letterStatus)\r\n      if(invisibleParts.length > 1 && !letterStatus){\r\n         invisibleParts[0].classList.remove('invisible-block')\r\n      } else if (invisibleParts.length === 1 && gameStatus){\r\n         invisibleParts[0].classList.remove('invisible-block')\r\n         let promise = new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n               resolve()\r\n            }, 1000);\r\n         });\r\n         promise\r\n         .then(()=>{\r\n            history.push('/gameover')\r\n         })\r\n         \r\n      }\r\n   }, [pressedLetter])\r\n\r\n   return(\r\n      <section className=\"hangman\">\r\n            <div className={\"hangman__gallows\"}></div>\r\n            <div id=\"hangman-part\" className={\"hangman__slipknot\"}></div>\r\n            <div id=\"hangman-part\" className={\"hangman__head\"}></div>\r\n            <div id=\"hangman-part\" className={\"hangman__body\"}></div>\r\n            <div id=\"hangman-part\" className={\"hangman__parts hangman__parts_hand hangman__parts_left\"}></div>\r\n            <div id=\"hangman-part\" className={\"hangman__parts hangman__parts_hand hangman__parts_right\"}></div>\r\n            <div id=\"hangman-part\" className={\"hangman__parts hangman__parts_leg hangman__parts_left\"}></div>\r\n            <div id=\"hangman-part\" className={\"hangman__parts hangman__parts_leg hangman__parts_right\"}></div>\r\n         </section>\r\n   )\r\n}\r\n\r\nexport default Slipknot;","function Keyboard({ getLetter }) {\r\n   return(\r\n      <section className={\"keyboard\"}>\r\n            <div className=\"keyboard__line\">\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ð¹</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ñ</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ñ</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ðº</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ðµ</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ð½</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ð³</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ñ</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ñ</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ð·</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ñ</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ñ</button>\r\n            </div>\r\n            <div className=\"keyboard__line\">\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ñ</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ñ</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ð²</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ð°</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ð¿</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ñ</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ð¾</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ð»</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ð´</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ð¶</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ñ</button>\r\n            </div>\r\n            <div className=\"keyboard__line\">\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ñ</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ñ</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ñ</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ð¼</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ð¸</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ñ</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ñ</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ð±</button>\r\n               <button className=\"keyboard__button\" onClick={getLetter}>Ñ</button>\r\n            </div>\r\n         </section>\r\n   )\r\n}\r\n\r\nexport default Keyboard;","function EncryptionWord({ renderWord }) {\r\n   return(\r\n      <section className=\"encryption-word\">\r\n            <ul className=\"encryption-word__container\">\r\n               {renderWord()}\r\n            </ul>\r\n         </section>\r\n   )\r\n}\r\n\r\nexport default EncryptionWord;","function StartButton({ startGame }) {\r\n   return(\r\n      <section className=\"start-game\">\r\n         <button onClick={startGame} className=\"game-button\" type=\"button\">start</button>\r\n      </section>\r\n   )\r\n}\r\n\r\nexport default StartButton;","import { useEffect, useState } from 'react'\r\nimport LetterContainer from './LetterContainer';\r\nimport Slipknot from './Slipknot'\r\nimport Keyboard from './Keyboard'\r\nimport EncryptionWord from './EncryptionWord'\r\nimport StartButton from './StartButton'\r\nimport { Switch, Route, Redirect, useHistory} from 'react-router-dom'\r\n\r\nfunction Main({ history, newWord}) {\r\n   const  [gameStatus, setGameStatus] = useState(false)\r\n   const [ letters, setLetters ] = useState({})\r\n   const [ pressedLetter, setPressedLetter ] = useState('')\r\n   const [ pressedLetterStatus, setPressedLetterStatus] = useState();\r\n\r\n   \r\n   function checkGuessed() {\r\n      const encryptedLetters = document.querySelectorAll('.encryption-word__letter')\r\n      const guessedLetters = Array.from(encryptedLetters).filter((letter) => {\r\n         return !letter.classList.contains('put-up-block')\r\n      })\r\n      if(guessedLetters.length === newWord.length){\r\n         let promise = new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n               resolve()\r\n            }, 1500);\r\n         });\r\n         promise\r\n         .then(()=>{\r\n            history.push('/victory')\r\n         })\r\n      }\r\n      console.log(guessedLetters)\r\n   }\r\n   \r\n   useEffect(() => {\r\n      checkGuessed()\r\n   })\r\n\r\n   function buttonOff(e){\r\n      e.target.setAttribute('disabled', true)\r\n      e.target.classList.add('keyboard__button_color-pink')\r\n   }\r\n\r\n   function getLetter(e) {\r\n      const letter = e.target.textContent\r\n      setPressedLetter(letter)\r\n      setLetters({...letters, [letter]: true})\r\n      buttonOff(e)\r\n      setPressedLetterStatus(newWord.includes(letter))\r\n   }\r\n\r\n   function renderWord(){\r\n      let i = 0;\r\n      const word = Array.from(newWord).map((letter) =>\r\n      (<LetterContainer\r\n         key={i++}\r\n         letter={letter}\r\n         pressedKeyBoardSymbols={letters}\r\n         />))\r\n      return word;\r\n   }\r\n\r\n   function startGame() {\r\n      history.push('/main/game')\r\n      setGameStatus(true)\r\n   }\r\n\r\n   useEffect(() => {\r\n      history.push('/main/start-game')\r\n   }, [])\r\n\r\n   return (\r\n      <main>\r\n         <Slipknot\r\n            letterStatus={pressedLetterStatus}\r\n            gameStatus={gameStatus}\r\n            pressedLetter={pressedLetter}\r\n            history={history}\r\n         />\r\n         <Switch>\r\n            <Route path=\"/main/start-game\">\r\n               <StartButton \r\n                  startGame={startGame}\r\n               />\r\n            </Route>\r\n            <Route path=\"/main/game\">\r\n               <EncryptionWord \r\n                  renderWord={renderWord}\r\n               />\r\n               <Keyboard\r\n                  getLetter={getLetter}\r\n               />\r\n            </Route>\r\n         </Switch>\r\n      </main>\r\n   )\r\n}\r\n\r\nexport default Main;","function EndGame({ history, children }) {\r\n   function toStartGame() {\r\n      history.push('/main/start-game')\r\n   }\r\n   return(\r\n      <div className=\"popup\">\r\n         {children}\r\n         <button className=\"game-button game-button_popup-fz\" type=\"button\" onClick={toStartGame}>New game</button>\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\nexport default EndGame;\r\n","class Api {\r\n   constructor() {\r\n   }\r\n   _checkResponse(res) {\r\n      if (res.ok) {\r\n         return res.json();\r\n      }\r\n      return Promise.reject(`ÐÑÐ¸Ð±ÐºÐ° ${res.status}`);\r\n   }\r\n\r\n   getMovies() {\r\n      return fetch(`https://api.themoviedb.org/discover/movie?with_genres=18&sort_by=vote_average.desc&vote_count.gte=10&language=ru`, {\r\n         headers: {\r\n            'Content-Type': 'application/json'\r\n         }\r\n      })\r\n      .then(this._checkResponse)\r\n   }\r\n\r\n}\r\n\r\nconst apiMovies = new Api();\r\n\r\nexport default apiMovies;","import {useEffect, useState} from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport { Switch, Route, useHistory} from 'react-router-dom'\nimport EndGame from './EndGame'\nimport apiMovies from '../utils/api'\n\nfunction App() {\n  \n  const [newWord, setWord] = useState('')\n  const [keyBoardSymbol, setKeyBoardSymbol] = useState({})\n  const history = useHistory()\n\n  apiMovies.getMovies()\n    .then((moviesList) => {\n      console.log(moviesList)\n    })\n  \n  useEffect(()=>{\n    apiMovies.getMovies()\n    .then((moviesList) => {\n      console.log(moviesList)\n    })\n    history.push('/main/start-game')\n    const words = ['ÑÐ½Ð´ÐµÐºÑ'];\n    setWord(words[Math.floor(Math.random() * words.length)]);\n  }, [])\n\n  return (\n    <div className = \"page__container\">\n      <Header />\n        <Switch>\n          <Route path=\"/main\">\n            <Main\n              history={history} \n              newWord = {newWord}\n              keyBoardSymbol={keyBoardSymbol}\n              getKeyBoardSymbol = {setKeyBoardSymbol}\n            />\n          </Route>\n          <Route path=\"/victory\">\n            <EndGame history={history}>\n              <h2 className=\"popup__title\">Victory</h2>\n            </EndGame>\n          </Route>\n          <Route path=\"/gameover\">\n            <EndGame history={history}>\n              <h2 className=\"popup__title\">Game Over</h2>\n            </EndGame>\n          </Route>\n        </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}